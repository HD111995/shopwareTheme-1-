<p>Scope analysis does not provide support for undeclared variables.</p><p><em>0</em> instances of <strong>missing semicolons</strong> counted.</p><p><em>1</em> unnecessary instances of the keyword <strong>new</strong> counted.</p><div class="beautify" data-prettydiff-ignore="true"><ol class="count"><li>1</li><li class="fold" title="folds from line 2 to line 17">-2</li><li class="fold" title="folds from line 3 to line 16">-3</li><li class="fold" title="folds from line 4 to line 15">-4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li class="fold" title="folds from line 18 to line 36">-18</li><li>19</li><li class="fold" title="folds from line 20 to line 24">-20</li><li>21</li><li>22</li><li>23</li><li>24</li><li class="fold" title="folds from line 25 to line 35">-25</li><li>26</li><li>27</li><li>28</li><li class="fold" title="folds from line 29 to line 34">-29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li class="fold" title="folds from line 37 to line 51">-37</li><li class="fold" title="folds from line 38 to line 50">-38</li><li>39</li><li>40</li><li>41</li><li class="fold" title="folds from line 42 to line 49">-42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li class="fold" title="folds from line 52 to line 66">-52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li><li>65</li><li>66</li><li>67</li><li>68</li><li>69</li><li>70</li><li>71</li><li>72</li><li>73</li><li>74</li><li>75</li><li>76</li><li>77</li><li>78</li><li>79</li><li>80</li><li>81</li><li>82</li><li>83</li><li>84</li><li class="fold" title="folds from line 85 to line 87">-85</li><li>86</li><li>87</li><li class="fold" title="folds from line 88 to line 94">-88</li><li class="fold" title="folds from line 89 to line 93">-89</li><li>90</li><li>91</li><li>92</li><li>93</li><li>94</li><li class="fold" title="folds from line 95 to line 98">-95</li><li>96</li><li>97</li><li>98</li><li>99</li><li>100</li><li class="fold" title="folds from line 101 to line 123">-101</li><li class="fold" title="folds from line 102 to line 104">-102</li><li>103</li><li>104</li><li class="fold" title="folds from line 105 to line 107">-105</li><li>106</li><li>107</li><li class="fold" title="folds from line 108 to line 110">-108</li><li>109</li><li>110</li><li class="fold" title="folds from line 111 to line 117">-111</li><li class="fold" title="folds from line 112 to line 116">-112</li><li>113</li><li>114</li><li>115</li><li>116</li><li>117</li><li class="fold" title="folds from line 118 to line 122">-118</li><li class="fold" title="folds from line 119 to line 121">-119</li><li>120</li><li>121</li><li>122</li><li>123</li><li class="fold" title="folds from line 124 to line 127">-124</li><li>125</li><li>126</li><li>127</li><li>128</li><li>129</li><li class="fold" title="folds from line 130 to line 152">-130</li><li class="fold" title="folds from line 131 to line 133">-131</li><li>132</li><li>133</li><li class="fold" title="folds from line 134 to line 136">-134</li><li>135</li><li>136</li><li class="fold" title="folds from line 137 to line 139">-137</li><li>138</li><li>139</li><li class="fold" title="folds from line 140 to line 146">-140</li><li class="fold" title="folds from line 141 to line 145">-141</li><li>142</li><li>143</li><li>144</li><li>145</li><li>146</li><li class="fold" title="folds from line 147 to line 151">-147</li><li class="fold" title="folds from line 148 to line 150">-148</li><li>149</li><li>150</li><li>151</li><li>152</li><li class="fold" title="folds from line 153 to line 156">-153</li><li>154</li><li>155</li><li>156</li><li>157</li><li>158</li><li class="fold" title="folds from line 159 to line 171">-159</li><li class="fold" title="folds from line 160 to line 170">-160</li><li class="fold" title="folds from line 161 to line 163">-161</li><li>162</li><li>163</li><li>164</li><li>165</li><li>166</li><li>167</li><li>168</li><li>169</li><li>170</li><li>171</li><li class="fold" title="folds from line 172 to line 216">-172</li><li class="fold" title="folds from line 173 to line 175">-173</li><li>174</li><li>175</li><li class="fold" title="folds from line 176 to line 184">-176</li><li>177</li><li>178</li><li>179</li><li>180</li><li>181</li><li>182</li><li>183</li><li>184</li><li class="fold" title="folds from line 185 to line 187">-185</li><li>186</li><li>187</li><li class="fold" title="folds from line 188 to line 215">-188</li><li class="fold" title="folds from line 189 to line 214">-189</li><li>190</li><li>191</li><li>192</li><li>193</li><li>194</li><li>195</li><li>196</li><li>197</li><li>198</li><li>199</li><li>200</li><li>201</li><li>202</li><li>203</li><li>204</li><li>205</li><li>206</li><li>207</li><li>208</li><li>209</li><li>210</li><li>211</li><li>212</li><li>213</li><li>214</li><li>215</li><li>216</li><li class="fold" title="folds from line 217 to line 220">-217</li><li>218</li><li>219</li><li>220</li><li>221</li><li>222</li><li>223</li><li class="fold" title="folds from line 224 to line 258">-224</li><li class="fold" title="folds from line 225 to line 227">-225</li><li>226</li><li>227</li><li class="fold" title="folds from line 228 to line 236">-228</li><li class="fold" title="folds from line 229 to line 235">-229</li><li>230</li><li>231</li><li>232</li><li>233</li><li>234</li><li>235</li><li>236</li><li class="fold" title="folds from line 237 to line 257">-237</li><li class="fold" title="folds from line 238 to line 256">-238</li><li>239</li><li>240</li><li>241</li><li>242</li><li>243</li><li>244</li><li>245</li><li>246</li><li>247</li><li>248</li><li>249</li><li>250</li><li>251</li><li>252</li><li>253</li><li>254</li><li>255</li><li>256</li><li>257</li><li>258</li><li class="fold" title="folds from line 259 to line 262">-259</li><li>260</li><li>261</li><li>262</li><li>263</li><li>264</li><li class="fold" title="folds from line 265 to line 276">-265</li><li class="fold" title="folds from line 266 to line 275">-266</li><li>267</li><li class="fold" title="folds from line 268 to line 274">-268</li><li>269</li><li>270</li><li>271</li><li>272</li><li>273</li><li>274</li><li>275</li><li>276</li><li class="fold" title="folds from line 277 to line 281">-277</li><li>278</li><li>279</li><li>280</li><li>281</li><li class="fold" title="folds from line 282 to line 287">-282</li><li>283</li><li>284</li><li>285</li><li>286</li><li>287</li><li>288</li><li class="fold" title="folds from line 289 to line 304">-289</li><li class="fold" title="folds from line 290 to line 303">-290</li><li class="fold" title="folds from line 291 to line 293">-291</li><li>292</li><li class="fold" title="folds from line 293 to line 302">-293</li><li class="fold" title="folds from line 294 to line 301">-294</li><li>295</li><li>296</li><li>297</li><li>298</li><li>299</li><li>300</li><li>301</li><li>302</li><li>303</li><li>304</li><li class="fold" title="folds from line 305 to line 345">-305</li><li class="fold" title="folds from line 306 to line 308">-306</li><li>307</li><li>308</li><li>309</li><li class="fold" title="folds from line 310 to line 344">-310</li><li class="fold" title="folds from line 311 to line 343">-311</li><li>312</li><li>313</li><li>314</li><li>315</li><li>316</li><li>317</li><li>318</li><li>319</li><li>320</li><li>321</li><li>322</li><li>323</li><li>324</li><li>325</li><li>326</li><li>327</li><li>328</li><li>329</li><li>330</li><li>331</li><li>332</li><li>333</li><li>334</li><li>335</li><li>336</li><li>337</li><li>338</li><li>339</li><li>340</li><li>341</li><li>342</li><li>343</li><li>344</li><li>345</li></ol>
<ol class="data"><li class="c0">    /*prettydiff.com space_close:false, variable_list:list*/<em class="line">&#xA;</em></li><li class="l0">var <em class="s0">ListItem</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>render: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;li className="ListItem"&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;a href={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        "/items/" + <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            .props<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            .item<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            .id;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    }&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        this.props.item.name<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;/a&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;/li&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>}),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">List</em> = React.createClass({<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>render    : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return &lt;ul className="List"&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>    this.renderList()<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>&lt;/ul&gt;;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>renderList: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.props<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.items<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.map(function (<em class="s2">item</em>) <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>return &lt;ListItem item={<em class="s2">item</em>}<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    key={<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>        <em class="s2">item</em>.id;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    }/&gt;;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><em class="s2">}</em>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>}),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">Mist</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>renderList: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.props<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.items<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>.map(function (<em class="s2">item</em>) <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>return &lt;ListItem item={<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>        return &lt;tag&gt;{<em class="s2">item</em>}&lt;/tag&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    }<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    key={<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>        <em class="s2">item</em>.id;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    }/&gt;;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><em class="s2">}</em>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>}),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">content</em> = (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>&lt;Nav&gt; {/* child comment, put {} around */}<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>    &lt;Person /* multi<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span> line<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span> comment */<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>        //attr="test"<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>        name={<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>            window.isLoggedIn<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>                ? window.name<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>                : '';<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>        }<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>        // end of line comment<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>    /&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>&lt;/Nav&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">qwer</em> = &lt;Dropdown&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>    A dropdown list<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>    &lt;Menu&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>        &lt;MenuItem&gt;Do Something&lt;/MenuItem&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>        &lt;MenuItem&gt;Do Something Fun!&lt;/MenuItem&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>        &lt;MenuItem&gt;Do Something Else&lt;/MenuItem&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>    &lt;/Menu&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;/DropDown&gt;;<em class="line">&#xA;</em></li><li class="l0">render(dropdown);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="c0">    // JSX<em class="line">&#xA;</em></li><li class="l0">var <em class="s0">box</em> = &lt;Box&gt; {<em class="line">&#xA;</em></li><li class="l0">    shouldShowAnswer(user)<em class="line">&#xA;</em></li><li class="l0">        ? &lt;Answer value={false}&gt;no&lt;/Answer&gt;<em class="line">&#xA;</em></li><li class="l0">        : &lt;Box.Comment&gt;<em class="line">&#xA;</em></li><li class="l0">            Text Content<em class="line">&#xA;</em></li><li class="l0">        &lt;/Box.Comment&gt;;<em class="line">&#xA;</em></li><li class="l0">} &lt;/Box&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">a</em> = function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>return &lt;tsdf&gt;asdf&lt;/tsdf&gt;;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">HelloMessage</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l1">    </span>render: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>return &lt;div&gt;Hello {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>    <strong class="new">this</strong>.props.name;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>}&lt;/div&gt;;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l1">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0">React.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;HelloMessage name="John"/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>mountNode<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">var <em class="s0">Timer</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>componentDidMount   : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.interval = setInterval(<strong class="new">this</strong>.tick, 1000);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>componentWillUnmount: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>clearInterval(<strong class="new">this</strong>.interval);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>getInitialState     : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return {secondsElapsed: 0};<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>render              : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;div&gt;Seconds Elapsed: {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    <strong class="new">this</strong>.state.secondsElapsed;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>}&lt;/div&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>tick                : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.setState({<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>secondsElapsed: <strong class="new">this</strong>.state.secondsElapsed + 1<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0">});<em class="line">&#xA;</em></li><li class="l0">React.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;Timer/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>mountNode<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">var <em class="s0">Timer</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>componentDidMount   : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.interval = setInterval(<strong class="new">this</strong>.tick, 1000);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>componentWillUnmount: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>clearInterval(<strong class="new">this</strong>.interval);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>getInitialState     : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return {secondsElapsed: 0};<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>render              : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;div&gt;Seconds Elapsed: {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    <strong class="new">this</strong>.state.secondsElapsed;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>}&lt;/div&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>tick                : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.setState({<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>secondsElapsed: <strong class="new">this</strong>.state.secondsElapsed + 1<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0">});<em class="line">&#xA;</em></li><li class="l0">React.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;Timer/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>mountNode<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">var <em class="s0">TodoList</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>render: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>var <em class="s1">createItem</em> = function (<em class="s2">itemText</em>) <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>return &lt;li&gt;{<em class="s2">itemText</em>}&lt;/li&gt;;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><em class="s2">}</em>;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return &lt;ul&gt;{<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>    <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>        .props<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>        .items<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>        .map(<em class="s1">createItem</em>);<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>}&lt;/ul&gt;;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>}),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">TodoApp</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>getInitialState: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return {items: [], text: ''};<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>handleSubmit   : function (<em class="s1">e</em>) <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><em class="s1">e</em>.preventDefault();<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>var <em class="s1">nextItems</em> = <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.state<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.items<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.concat([<strong class="new">this</strong>.state.text]),<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><em class="s1">nextText</em>  = '';<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.setState({items: <em class="s1">nextItems</em>, text: <em class="s1">nextText</em>});<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>onChange       : function (<em class="s1">e</em>) <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.setState({text: <em class="s1">e</em>.target.value});<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>render         : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;div&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;h3&gt;TODO&lt;/h3&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;TodoList items={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        <strong class="new">this</strong>.state.items;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    }/&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;form onSubmit={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        <strong class="new">this</strong>.handleSubmit;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    }&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        &lt;input onChange={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                <strong class="new">this</strong>.onChange;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            value={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                <strong class="new">this</strong>.state.text;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            }/&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        &lt;button&gt;{<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            'Add #' + (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    .state<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    .items<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    .length + 1<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            );<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        }&lt;/button&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;/form&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;/div&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0">React.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;TodoApp/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>mountNode<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">var <em class="s0">converter</em> = <strong class='new'>new</strong> Showdown.converter(),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s0">MarkdownEditor</em> = React.createClass({<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>getInitialState: function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return {value: 'Type some *markdown* here!'};<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>handleChange   : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><strong class="new">this</strong>.setState({<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>value: <strong class="new">this</strong><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.refs<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.textarea<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.getDOMNode()<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>.value<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em>,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span>render         : function () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;div className="MarkdownEditor"&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;h3&gt;Input&lt;/h3&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;textarea onChange={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            <strong class="new">this</strong>.handleChange;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        ref="textarea"<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        defaultValue={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            <strong class="new">this</strong>.state.value;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        }/&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;h3&gt;Output&lt;/h3&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    &lt;div className="content"<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        dangerouslySetInnerHTML={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                __html: <em class="s0">converter</em>.makeHtml(<strong class="new">this</strong>.state.value)<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            };<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        }/&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;/div&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>});<em class="line">&#xA;</em></li><li class="l0">React.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;MarkdownEditor/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>mountNode<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">import React from 'react';<em class="line">&#xA;</em></li><li class="l0">class MyComponent extends React.Component {<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>render() <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>var <em class="s1">a</em> = 1;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;h1 style={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    {margin: 0};<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>}&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    Test<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;/h1&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0">}<em class="line">&#xA;</em></li><li class="l0">export const <em class="s0">Welcome</em> = ({name}) =&gt; (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;div&gt;<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>    Hello, {name}.<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;/div&gt;<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="l0">ReactDOM.render (<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>&lt;Voting hasVoted='Trainspotting' winner='Trainspotting'<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>    pair={pair}/&gt;,<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>document.getElementById('app'),<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>asdf<em class="line">&#xA;</em></li><li class="l0">);<em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0">class Header extends Component {<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>renderLinks() <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>if (<strong class="new">this</strong>.props.authenticated) <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>return(<em class="s0">a</em>);<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><em class="s2">}</em> else <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>return [<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>&lt;li key="signin" className="nav-item"&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    &lt;Link className="nav-link" to="/signin"&gt;Sign in&lt;/Link&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>&lt;/li&gt;,<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>&lt;li key="signout" className="nav-item"&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>    &lt;Link className="nav-link" to="/signup "&gt;Sign Up&lt;/Link&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>&lt;/li&gt;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>];<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><em class="s2">}</em><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0">}<em class="line">&#xA;</em></li><li class="l0">export default class kisharNine extends Component {<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>constructor(props) <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>super(props);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="s0"><em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span>render() <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>return (<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>&lt;Navigator initialRoute={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            title: 'My Initial Scene',<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            index: 0<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        };<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    renderScene={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>        (route, navigator) =&gt; &lt;MyScene title={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                route.title;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            // Function to call when a new scene should be displayed<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            onForward={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                () =&gt; {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    const <em class="s1">nextIndex</em> = route.index + 1;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    navigator.push({<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                        index: <em class="s1">nextIndex</em>,<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                        title: 'Scene ' + <em class="s1">nextIndex</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    });<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            // Function to call to go back to the previous scene<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            onBack={<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                () =&gt; {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    if (route.index &gt; 0) {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                        navigator.pop();<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                    }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>                }<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>            }/&gt;;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span><span class="l1">    </span>    }/&gt;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l0">    </span>);<em class="line">&#xA;</em></li><li class="l0"><span class="l0">    </span><em class="s1">}</em><em class="line">&#xA;</em></li><li class="l0">}<em class="line">&#xA;</em></li></ol></div>
