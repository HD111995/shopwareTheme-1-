[
{"begin":-1,"ender":-1,"lexer":"markup","lines":0,"stack":"global","token":"<?xml?>","types":"xml"},
{"begin":0,"ender":-1,"lexer":"markup","lines":1,"stack":"xml","token":"version=\"1.0\"","types":"attribute"},
{"begin":0,"ender":-1,"lexer":"markup","lines":1,"stack":"xml","token":"encoding=\"UTF-8\"","types":"attribute"},
{"begin":-1,"ender":-1,"lexer":"markup","lines":2,"stack":"global","token":"<!DOCTYPE html PUBLIC \"-//W3C//DTDXHTML1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">","types":"sgml"},
{"begin":-1,"ender":42,"lexer":"markup","lines":2,"stack":"global","token":"<html>","types":"start"},
{"begin":4,"ender":42,"lexer":"markup","lines":1,"stack":"html","token":"xml:lang=\"en\"","types":"attribute"},
{"begin":4,"ender":42,"lexer":"markup","lines":1,"stack":"html","token":"xmlns=\"http://www.w3.org/1999/xhtml\"","types":"attribute"},
{"begin":4,"ender":31,"lexer":"markup","lines":2,"stack":"html","token":"<head>","types":"start"},
{"begin":7,"ender":10,"lexer":"markup","lines":2,"stack":"head","token":"<title>","types":"start"},
{"begin":8,"ender":10,"lexer":"markup","lines":0,"stack":"title","token":"parse framework browser tool","types":"content"},
{"begin":8,"ender":10,"lexer":"markup","lines":0,"stack":"title","token":"</title>","types":"end"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<meta/>","types":"singleton"},
{"begin":11,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"content=\"application/xhtml+xml;charset=UTF-8\"","types":"attribute"},
{"begin":11,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"http-equiv=\"Content-Type\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<meta/>","types":"singleton"},
{"begin":14,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"content=\"blendTrans(Duration=0)\"","types":"attribute"},
{"begin":14,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"http-equiv=\"Page-Enter\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<meta/>","types":"singleton"},
{"begin":17,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"content=\"blendTrans(Duration=0)\"","types":"attribute"},
{"begin":17,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"http-equiv=\"Page-Exit\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<meta/>","types":"singleton"},
{"begin":20,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"content=\"text/css\"","types":"attribute"},
{"begin":20,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"http-equiv=\"content-style-type\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<meta/>","types":"singleton"},
{"begin":23,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"content=\"application/javascript\"","types":"attribute"},
{"begin":23,"ender":31,"lexer":"markup","lines":1,"stack":"meta","token":"http-equiv=\"content-script-type\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"<link/>","types":"singleton"},
{"begin":26,"ender":31,"lexer":"markup","lines":1,"stack":"link","token":"href=\"../runtimes/browsertest.css\"","types":"attribute"},
{"begin":26,"ender":31,"lexer":"markup","lines":1,"stack":"link","token":"media=\"all\"","types":"attribute"},
{"begin":26,"ender":31,"lexer":"markup","lines":1,"stack":"link","token":"rel=\"stylesheet\"","types":"attribute"},
{"begin":26,"ender":31,"lexer":"markup","lines":1,"stack":"link","token":"type=\"text/css\"","types":"attribute"},
{"begin":7,"ender":31,"lexer":"markup","lines":2,"stack":"head","token":"</head>","types":"end"},
{"begin":4,"ender":41,"lexer":"markup","lines":2,"stack":"html","token":"<body>","types":"start"},
{"begin":32,"ender":39,"lexer":"markup","lines":2,"stack":"body","token":"<h1>","types":"start"},
{"begin":33,"ender":39,"lexer":"markup","lines":0,"stack":"h1","token":"parse-framework experimentation,","types":"content"},
{"begin":33,"ender":38,"lexer":"markup","lines":1,"stack":"h1","token":"<span>","types":"start"},
{"begin":35,"ender":38,"lexer":"markup","lines":1,"stack":"span","token":"class=\"version\"","types":"attribute"},
{"begin":35,"ender":38,"lexer":"markup","lines":0,"stack":"span","token":"2.3.7","types":"content"},
{"begin":35,"ender":38,"lexer":"markup","lines":0,"stack":"span","token":"</span>","types":"end"},
{"begin":33,"ender":39,"lexer":"markup","lines":0,"stack":"h1","token":"</h1>","types":"end"},
{"begin":32,"ender":41,"lexer":"markup","lines":2,"stack":"body","token":"<!-- parse-ignore-start -->\n        <div>\n            <ul>\n                <li id=\"timeparse\">Parsing time: <span></span></li>\n                <li id=\"timetotal\">Browser time: <span></span></li>\n                <li id=\"language\">Lang guessed: <span></span></li>\n                <li id=\"errors\">Parse errors: <span></span></li>\n            </ul>\n        </div>\n        <div class=\"input\">\n            <p><input type=\"checkbox\" id=\"aceControl\" checked=\"checked\"/> <label for=\"aceControl\">Use Ace code editor</label></p>\n            <p><label for=\"input\">Input</label>\n                <textarea id=\"input\"></textarea></p>\n        </div>\n        <div>\n            <h2>Options</h2>\n            <div>\n                <ul>\n                    <li><input type=\"checkbox\" id=\"tagSort\"/> <label for=\"tagSort\">tagSort</label></li>\n                    <li><input type=\"checkbox\" id=\"objectSort\"/> <label for=\"objectSort\">objectSort</label></li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"output\">\n            <h2>Output</h2>\n            <p>A colorful visual hint is added to help identify which lexer processed which records:</p>\n            <ul class=\"key\">\n                <li class=\"markdown\">White for markdown lexer</li>\n                <li class=\"markup\">Red for markup lexer:   (XML/HTML like syntax)</li>\n                <li class=\"script\">Green for script lexer: (C-like syntax)</li>\n                <li class=\"style\">Blue for style lexer:   (CSS/SCSS/LESS like syntax)</li>\n            </ul>\n            <div id=\"data\"></div>\n        </div>\n        <script src=\"../node_modules/ace-builds/src-min-noconflict/ace.js\" type=\"application/javascript\"></script>\n        <script type=\"application/javascript\" src=\"../js/browsertest.js\"></script>\n        <!-- parse-ignore-end -->","types":"ignore"},
{"begin":32,"ender":41,"lexer":"markup","lines":2,"stack":"body","token":"</body>","types":"end"},
{"begin":4,"ender":42,"lexer":"markup","lines":2,"stack":"html","token":"</html>","types":"end"}
]