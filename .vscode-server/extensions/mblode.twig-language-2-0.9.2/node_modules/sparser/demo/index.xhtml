<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Sparser demo tool</title>
        <link href="https://sparser.io/demo" rel="canonical" type="application/xhtml+xml"/>
        <meta content="application/xhtml+xml;charset=UTF-8" http-equiv="Content-Type"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Enter"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Exit"/>
        <meta content="text/css" http-equiv="content-style-type"/>
        <meta content="application/javascript" http-equiv="content-script-type"/>
        <link href="browsertest.css" media="all" rel="stylesheet" type="text/css"/>
    </head>
    <body>
        <div>
            <div class="title">
                <h1>
                    <a href="../">Sparser</a> - demo tool
                </h1>
                <p class="version">1.4.12</p>
                <ul>
                    <li id="timeparse">Parsing time: <span></span></li>
                    <li id="timetotal">Browser time: <span></span></li>
                    <li id="language">Lang guessed: <span></span></li>
                    <li id="errors">Parse errors: <span></span></li>
                </ul>
                <p class="ace-control"><input type="checkbox" id="aceControl" checked="checked"/> <label for="aceControl">Use Ace code editor</label></p>
            </div>
            <div class="navigation">
                <h2>Link List</h2>
                <ul>
                    <li><a href="https://github.com/Unibeautify/sparser/issues">Github</a></li>
                    <li><a href="https://www.npmjs.com/package/sparser">NPM</a></li>
                    <li><a href="../docs-html/tech-documentation.xhtml">Documentation</a></li>
                    <li><a href="https://unibeautify.com/">Unibeautify</a></li>
                </ul>
            </div>
            <div class="options">
                <h2>Options</h2>
                <ul>
                    <li><input type="checkbox" id="toggle-options"/> <label for="toggle-options">Toggle display of options settings (at bottom of page)</label></li>
                    <li>Options can also be specified on the query string of the page address.</li>
                    <li>Use the query string parameter <em>scrolldown</em> to execute on page load and scroll to the bottom of the parse table.</li>
                </ul>
            </div>
            <div class="keybox">
                <h2>Output Key</h2>
                <p>A colorful visual hint by lexer type:</p>
                <ul class="key">
                    <li class="markdown">White for markdown lexer</li>
                    <li class="markup">Red for markup lexer:   (XML/HTML like syntax)</li>
                    <li class="script">Green for script lexer: (C-like syntax)</li>
                    <li class="style">Blue for style lexer:   (CSS/SCSS/LESS like syntax)</li>
                </ul>
            </div>
            <span class="clear"></span>
        </div>
        <div>
            <div class="input">
                <h2><label for="input">Input</label></h2>
                <p><textarea id="input" wrap="off"></textarea></p>
            </div>
            <div class="output">
                <h2>Output</h2>
                <div id="data"></div>
            </div>
            <div class="output" style="display:none">
                <h2><label for="datatext">Output</label></h2>
                <textarea id="datatext"></textarea>
            </div>
            <span class="clear"></span>
        </div>
        <div id="options" style="display:none">
            <h2>Options</h2>
            <!-- option data start -->
<ul><li id="attribute_sort"><h3>Sort Attributes</h3><span><input type="radio" checked="checked" id="option-false-attribute_sort" name="option-attribute_sort" value="false"/> <label for="option-false-attribute_sort">false</label></span><span><input type="radio" id="option-true-attribute_sort" name="option-attribute_sort" value="true"/> <label for="option-true-attribute_sort">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">attribute_sort</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.attribute_sort</td></tr><tr><th>Description</th><td class="option-description">Alphanumerically sort markup attributes. Sorting is ignored if a given tag contains an attribute with instructions for a different language such as a template scheme, child markup tag, or start of a code structure.</td></tr></tbody></table></li><li id="attribute_sort_list"><h3><label for="option-attribute_sort_list" class="label">Sort Attribute List</label></h3><input type="text" id="option-attribute_sort_list" value="" data-type="string"/><table><tbody><tr><th>Name</th><td class="option-name">attribute_sort_list</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td></td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.attribute_sort_list</td></tr><tr><th>Description</th><td class="option-description">A comma separated list of attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires 'attribute_sort' have a value of true.</td></tr></tbody></table></li><li id="correct"><h3>Correct</h3><span><input type="radio" checked="checked" id="option-false-correct" name="option-correct" value="false"/> <label for="option-false-correct">false</label></span><span><input type="radio" id="option-true-correct" name="option-correct" value="true"/> <label for="option-true-correct">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">correct</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.correct</td></tr><tr><th>Description</th><td class="option-description">Automatically correct sloppiness in code. If false missing syntax will be included starting with 'x', such as 'x;' for missing simicolons.</td></tr></tbody></table></li><li id="crlf"><h3>CRLF</h3><span><input type="radio" checked="checked" id="option-false-crlf" name="option-crlf" value="false"/> <label for="option-false-crlf">false</label></span><span><input type="radio" id="option-true-crlf" name="option-crlf" value="true"/> <label for="option-true-crlf">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">crlf</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.crlf</td></tr><tr><th>Description</th><td class="option-description">If line termination should be crlf (Windows) otherwise line termination is lf (Unix).</td></tr></tbody></table></li><li id="end_comma"><h3><label for="option-end_comma" class="label">End Comma</label></h3><select id="option-end_comma"><option data-description="Adds terminal commas if they are missing." >always</option><option data-description="Removes terminal commas if they are present." >never</option><option data-description="Ignores this option." selected="selected">none</option></select><table><tbody><tr><th>Name</th><td class="option-name">end_comma</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>none</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>script</strong>.end_comma</td></tr><tr><th>Description</th><td class="option-description">Whether terminal commas in objects and arrays should be added or eliminated. <span>&bullet; <strong>none</strong> &#8212; Ignores this option.</span></td></tr></tbody></table></li><li id="format"><h3><label for="option-format" class="label">Output Format</label></h3><select id="option-format"><option data-description="html" selected="selected">html</option><option data-description="The output format is an object of arrays such that the same index of all the arrays represents one data record, for example: {begin:[],ender:[],lexer:[],lines[],stack:[],token:[],types:[]}." >arrays</option><option data-description="The output format is comma separated value format." >csv</option><option data-description="Generates the output in a markdown table." >markdown</option><option data-description="The output format is an array of arrays which is structurally similar to the objects format but without key names, for example: [[-1,-1,&quot;script&quot;,0,&quot;global&quot;,&quot;const&quot;,&quot;word&quot;]]." >minimal</option><option data-description="The output format is an array of objects such that each array index is one data record, for example: [{begin:-1,ender:-1,lexer:&quot;script&quot;,lines:0,stack:&quot;global&quot;,token:&quot;const&quot;,types:&quot;word&quot;}]." >objects</option></select><table><tbody><tr><th>Name</th><td class="option-name">format</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>arrays</td></tr><tr><th>Usage</th><td class="option-usage">options.format</td></tr><tr><th>Description</th><td class="option-description">Defines the output format of the parser. <span>&bullet; <strong>html</strong> &#8212; Renders the output into an HTML table. This option value is only available in this demo tool.</span></td></tr></tbody></table></li><li id="language"><h3><label for="option-language" class="label">Language</label></h3><input type="text" id="option-language" value="auto" data-type="string"/><table><tbody><tr><th>Name</th><td class="option-name">language</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>auto</td></tr><tr><th>Usage</th><td class="option-usage">options.language</td></tr><tr><th>Description</th><td class="option-description">The language to parse.  The value auto will result in language auto detection.</td></tr></tbody></table></li><li id="lexer"><h3><label for="option-lexer" class="label">Lexer</label></h3><input type="text" id="option-lexer" value="auto" data-type="string"/><table><tbody><tr><th>Name</th><td class="option-name">lexer</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>auto</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer</td></tr><tr><th>Description</th><td class="option-description">The lexer used to perform the parsing.  The value auto will result in language auto detection.</td></tr></tbody></table></li><li id="no_lead_zero"><h3>No Lead Zero</h3><span><input type="radio" checked="checked" id="option-false-no_lead_zero" name="option-no_lead_zero" value="false"/> <label for="option-false-no_lead_zero">false</label></span><span><input type="radio" id="option-true-no_lead_zero" name="option-no_lead_zero" value="true"/> <label for="option-true-no_lead_zero">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">no_lead_zero</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>style</strong>.no_lead_zero</td></tr><tr><th>Description</th><td class="option-description">Whether the zero to the left of the decimal point should be removed from numbers between 0 and 1.</td></tr></tbody></table></li><li id="object_sort"><h3>Object Sort</h3><span><input type="radio" checked="checked" id="option-false-object_sort" name="option-object_sort" value="false"/> <label for="option-false-object_sort">false</label></span><span><input type="radio" id="option-true-object_sort" name="option-object_sort" value="true"/> <label for="option-true-object_sort">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">object_sort</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage"><span>options.lexer_options.<strong>script</strong>.object_sort</span><span>options.lexer_options.<strong>style</strong>.object_sort</span></td></tr><tr><th>Description</th><td class="option-description">Where style properties should be sorted by type and then alphabetically and whether script object properties should be sorted alphabetically.</td></tr></tbody></table></li><li id="parse_space"><h3>Parse Markup White Space</h3><span><input type="radio" checked="checked" id="option-false-parse_space" name="option-parse_space" value="false"/> <label for="option-false-parse_space">false</label></span><span><input type="radio" id="option-true-parse_space" name="option-parse_space" value="true"/> <label for="option-true-parse_space">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">parse_space</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.parse_space</td></tr><tr><th>Description</th><td class="option-description">Whether white space should be parsed as content tokens.</td></tr></tbody></table></li><li id="preserve_comment"><h3>Preserve Comment</h3><span><input type="radio" checked="checked" id="option-false-preserve_comment" name="option-preserve_comment" value="false"/> <label for="option-false-preserve_comment">false</label></span><span><input type="radio" id="option-true-preserve_comment" name="option-preserve_comment" value="true"/> <label for="option-true-preserve_comment">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">preserve_comment</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.preserve_comment</td></tr><tr><th>Description</th><td class="option-description">Whether comments should be ignored from manipulation, such as word wrap.</td></tr></tbody></table></li><li id="preserve_text"><h3>Preserve Text</h3><span><input type="radio" checked="checked" id="option-false-preserve_text" name="option-preserve_text" value="false"/> <label for="option-false-preserve_text">false</label></span><span><input type="radio" id="option-true-preserve_text" name="option-preserve_text" value="true"/> <label for="option-true-preserve_text">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">preserve_text</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.preserve_text</td></tr><tr><th>Description</th><td class="option-description">Whether text content should be preserved from manipulation, such as word wrap.</td></tr></tbody></table></li><li id="quote_convert"><h3><label for="option-quote_convert" class="label">Quote Convert</label></h3><select id="option-quote_convert"><option data-description="Converts single quote characters to double quote characters." >double</option><option data-description="Ignores this option." selected="selected">none</option><option data-description="Converts double quote characters to single quote characters." >single</option></select><table><tbody><tr><th>Name</th><td class="option-name">quote_convert</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>none</td></tr><tr><th>Usage</th><td class="option-usage"><span>options.lexer_options.<strong>markup</strong>.quote_convert</span><span>options.lexer_options.<strong>script</strong>.quote_convert</span><span>options.lexer_options.<strong>style</strong>.quote_convert</span></td></tr><tr><th>Description</th><td class="option-description">If quote characters should be converted from single quotes to double quotes or the opposite. This option does take into account escaped quote characters. <span>&bullet; <strong>none</strong> &#8212; Ignores this option.</span></td></tr></tbody></table></li><li id="tag_merge"><h3>Tag Merge</h3><span><input type="radio" checked="checked" id="option-false-tag_merge" name="option-tag_merge" value="false"/> <label for="option-false-tag_merge">false</label></span><span><input type="radio" id="option-true-tag_merge" name="option-tag_merge" value="true"/> <label for="option-true-tag_merge">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">tag_merge</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.tag_merge</td></tr><tr><th>Description</th><td class="option-description">If adjacent start and end tags in markup should be merged into one singleton tag.</td></tr></tbody></table></li><li id="tag_sort"><h3>Tag Sort</h3><span><input type="radio" checked="checked" id="option-false-tag_sort" name="option-tag_sort" value="false"/> <label for="option-false-tag_sort">false</label></span><span><input type="radio" id="option-true-tag_sort" name="option-tag_sort" value="true"/> <label for="option-true-tag_sort">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">tag_sort</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.tag_sort</td></tr><tr><th>Description</th><td class="option-description">Whether markup tags should be alphabetically sorted amonst their siblings.</td></tr></tbody></table></li><li id="unformatted"><h3>Tag Unformatted</h3><span><input type="radio" checked="checked" id="option-false-unformatted" name="option-unformatted" value="false"/> <label for="option-false-unformatted">false</label></span><span><input type="radio" id="option-true-unformatted" name="option-unformatted" value="true"/> <label for="option-true-unformatted">true</label></span><table><tbody><tr><th>Name</th><td class="option-name">unformatted</td></tr><tr><th>Type</th><td>boolean</td></tr><tr><th>Default</th><td>false</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>markup</strong>.unformatted</td></tr><tr><th>Description</th><td class="option-description">If tags in markup code should be preserved from any manner of alteration.</td></tr></tbody></table></li><li id="variable_list"><h3><label for="option-variable_list" class="label">Variable List</label></h3><select id="option-variable_list"><option data-description="Separates variable declarations into separate statements." >each</option><option data-description="Combines consecutive variable declaration statements into a single comma separated list." >list</option><option data-description="Ignores this option." selected="selected">none</option></select><table><tbody><tr><th>Name</th><td class="option-name">variable_list</td></tr><tr><th>Type</th><td>string</td></tr><tr><th>Default</th><td>none</td></tr><tr><th>Usage</th><td class="option-usage">options.lexer_options.<strong>script</strong>.variable_list</td></tr><tr><th>Description</th><td class="option-description">Whether consecutive variable declarations should be separate statements or a comma separated list. Use of this option respects the different types of declarations: var, const, let. <span>&bullet; <strong>none</strong> &#8212; Ignores this option.</span></td></tr></tbody></table></li><li id="wrap"><h3><label for="option-wrap" class="label">Wrap</label></h3><input type="text" id="option-wrap" value="0" data-type="number"/><table><tbody><tr><th>Name</th><td class="option-name">wrap</td></tr><tr><th>Type</th><td>number</td></tr><tr><th>Default</th><td>0</td></tr><tr><th>Usage</th><td class="option-usage">options.wrap</td></tr><tr><th>Description</th><td class="option-description">The character distance in which to apply word wrap. A value of less than 1 eliminates word wrap.</td></tr></tbody></table></li></ul><!-- option data end -->
        </div>
        <script src="../node_modules/ace-builds/src-min-noconflict/ace.js" type="application/javascript"></script>
        <script type="application/javascript" src="../js/demo/demo.js"></script>
    </body>
</html>