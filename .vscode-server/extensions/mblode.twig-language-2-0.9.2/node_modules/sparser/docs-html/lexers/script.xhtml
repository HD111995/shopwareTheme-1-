<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<!-- Automatically generated file. Do not manually alter! -->

<head><title>Lexer - script</title> <link href="https://sparser.io/docs-html/lexers/script.xhtml" rel="canonical" type="application/xhtml+xml"/> <meta content="width=device-width, initial-scale=1" name="viewport"/> <meta content="index, follow" name="robots"/> <meta content="Sparser - Universal Parser" name="DC.title"/> <meta content="#fff" name="theme-color"/> <meta content="Austin Cheney" name="author"/> <meta content="Sparser is a programming language parsing utility that can interpret many different languages using a single simple data model." name="description"/> <meta content="Global" name="distribution"/> <meta content="en" http-equiv="Content-Language"/> <meta content="application/xhtml+xml;charset=UTF-8" http-equiv="Content-Type"/> <meta content="blendTrans(Duration=0)" http-equiv="Page-Enter"/> <meta content="blendTrans(Duration=0)" http-equiv="Page-Exit"/> <meta content="text/css" http-equiv="content-style-type"/> <meta content="application/javascript" http-equiv="content-script-type"/> <meta content="google515f7751c9f8a155" name="google-site-verification"/> <meta content="#bbbbff" name="msapplication-TileColor"/> <link href="/website.css" media="all" rel="stylesheet" type="text/css"/> </head><body id="documentation"><div id="top_menu"><h1><a href="/">Sparser</a></h1>
<ul><li class="donate"><a href="https://liberapay.com/prettydiff/donate"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80" height="16" width="16" x="7" y="7"><g transform="translate(-78.37-208.06)" fill="#111"><path d="m104.28 271.1c-3.571 0-6.373-.466-8.41-1.396-2.037-.93-3.495-2.199-4.375-3.809-.88-1.609-1.308-3.457-1.282-5.544.025-2.086.313-4.311.868-6.675l9.579-40.05 11.69-1.81-10.484 43.44c-.202.905-.314 1.735-.339 2.489-.026.754.113 1.421.415 1.999.302.579.817 1.044 1.546 1.395.729.353 1.747.579 3.055.679l-2.263 9.278"/><path d="m146.52 246.14c0 3.671-.604 7.03-1.811 10.07-1.207 3.043-2.879 5.669-5.01 7.881-2.138 2.213-4.702 3.935-7.693 5.167-2.992 1.231-6.248 1.848-9.767 1.848-1.71 0-3.42-.151-5.129-.453l-3.394 13.651h-11.162l12.52-52.19c2.01-.603 4.311-1.143 6.901-1.622 2.589-.477 5.393-.716 8.41-.716 2.815 0 5.242.428 7.278 1.282 2.037.855 3.708 2.024 5.02 3.507 1.307 1.484 2.274 3.219 2.904 5.205.627 1.987.942 4.11.942 6.373m-27.378 15.461c.854.202 1.91.302 3.167.302 1.961 0 3.746-.364 5.355-1.094 1.609-.728 2.979-1.747 4.111-3.055 1.131-1.307 2.01-2.877 2.64-4.714.628-1.835.943-3.858.943-6.071 0-2.161-.479-3.998-1.433-5.506-.956-1.508-2.615-2.263-4.978-2.263-1.61 0-3.118.151-4.525.453l-5.28 21.948"/></g></svg> Donate</a></li> <li><a href="/demo/?scrolldown">Demo</a></li> <li><a href="/docs-html/tech-documentation.xhtml">Documentation</a></li> <li><a href="https://github.com/unibeautify/sparser">Github</a></li> <li><a href="https://www.npmjs.com/package/sparser">NPM</a></li></ul><span class="clear"></span></div><div id="content"><h1><span>Sparser</span>Lexer - script</h1>
<div class="section"><h2 id="x-tokens">x tokens</h2>
<p>When option <em>correct</em> is true missing syntax characters are inserted, which can include: curly braces, semicolons, and parenthesis. When <em>correct</em> is set to false the characters are still inserted, but artificially so as <em>X</em> tokens. These helps reason about code structure and normalize certain syntax ambiguities. These tokens are recognizable as they start with a lowercase <em>x</em> as in <code><![CDATA[x;]]></code> for an inserted semicolon.</p>
<p><strong>x tokens should be removed by the consuming application or converted to regular syntax by removing the x character.</strong></p>
</div><div class="section"><h2 id="types-values">types values</h2>
<ul><li><strong>comment</strong> - Describes both block comments (<code><![CDATA[/*]]></code>) and line comments (<code><![CDATA[//]]></code>)</li><li><strong>end</strong> - Describes <code><![CDATA[}]]></code>, <code><![CDATA[]]]></code>, and <code><![CDATA[)]]></code>.</li><li><strong>generic</strong> - Java and C# styled type generics as used in TypeScript</li><li><strong>operator</strong> - JavaScript operators and other syntax characters not otherwise described here.</li><li><strong>number</strong> - Numbers.</li><li><strong>property</strong> - A named reference of an object.</li><li><strong>reference</strong> - A word token type that is declared in the code sample.</li><li><strong>regex</strong> - Regular expressions. Described as delimited by <code><![CDATA[/]]></code> characters but not in such a way that the first character could suggestion a division operator.</li><li><strong>separator</strong> - Describes <code><![CDATA[,]]></code>, <code><![CDATA[.]]></code>, and <code><![CDATA[;]]></code>.</li><li><strong>string</strong> - Strings, which includes JavaScript template strings.</li><li><strong>start</strong> - Describes <code><![CDATA[{]]></code>, <code><![CDATA[[]]></code>, and <code><![CDATA[(]]></code>.</li><li><strong>template</strong> - Describes syntax groups that comprise a known foreign language, often a template language, and is otherwise illegal syntax in JavaScript.</li><li><strong>template_else</strong> - A template type that is used as the <em>else</em> block of a condition.</li><li><strong>template_end</strong> - A terminal token of a template body.</li><li><strong>template_start</strong> - A start token of a template body.</li><li><strong>template_string_end</strong> - A template string that terminates with <code><![CDATA[${]]></code>.</li><li><strong>template_string_else</strong> - A template string that starts with <code><![CDATA[}]]></code> and terminates with <code><![CDATA[${]]></code>.</li><li><strong>template_string_start</strong> - A template string that starts with <code><![CDATA[}]]></code>.</li><li><strong>type</strong> - A TypeScript data type declaration.</li><li><strong>type_end</strong> - Closing out a TypeScript data type.</li><li><strong>type_start</strong> - A starting structure of TypeScript data types.</li><li><strong>word</strong> - A collection of characters that comprise a JavaScript keyword or reference not explicitly declared in the code sample. This parser is less strict than a JavaScript compiler in that it does not, at this time, trap certain extended UTF8 control characters that aren't valid in identifiers.</li></ul></div><div class="section"><h2 id="stack-values">stack values</h2>
<p>The stack values are identified by either a known categorical term that describes a common structure or by a keyword that immediately describes the current block.</p>
<h3 id="keyword-based-stack-values">Keyword based stack values</h3>
<ul><li><strong>catch</strong></li><li><strong>class</strong></li><li><strong>do</strong></li><li><strong>else</strong></li><li><strong>finally</strong></li><li><strong>for</strong></li><li><strong>function</strong></li><li><strong>if</strong></li><li><strong>switch</strong></li><li><strong>try</strong></li><li><strong>while</strong></li></ul><h3 id="structure-based-stack-values">Structure based stack values</h3>
<ul><li><strong>arguments</strong> - Function arguments at a functions declaration point. Delimited by parenthesis.</li><li><strong>array</strong> - Array, but it could also describe array notation structures referencing properties of object literals.</li><li><strong>attribute</strong> - CSharp styled data attributes</li><li><strong>block</strong> - A block not associated with a language keyword, as in a stand alone structure to provide independent block scope that cannot be referenced.</li><li><strong>data_type</strong> - A TypeScript data type structure, for example: <code><![CDATA[let x:[string, number] = 0;]]></code></li><li><strong>expression</strong> - The logic that makes decisions, such as the logic part between an <code><![CDATA[if]]></code> keyword and its block.</li><li><strong>initializer</strong> - Execution of containment around a reference called with <code><![CDATA[new]]></code> to invoke poly-instantiation.</li><li><strong>map</strong> - A data structure that is similar to an object literal, but different.</li><li><strong>method</strong> - Function arguments at the function's reference. Delimited by parenthesis.</li><li><strong>notation</strong> - A TSX data structure. TSX is TypeScript adapted to the syntax of JSX.</li><li><strong>object</strong> - A regular object literal.</li><li><strong>paren</strong> - Describes parenthesis groupings when other parenthesis based descriptions don't apply. Most typically found as a grouping mechanism in statements and expressions.</li></ul></div><div class="section"><h2 id="escaping-code-from-the-parser">Escaping code from the parser</h2>
<p>The parser is capable of selectively ignoring blocks of code. This occurs when a comment is present starting with <code><![CDATA[parse-ignore-start]]></code> until a later comment is encountered starting with <code><![CDATA[parse-ignore-end]]></code>. It does not matter whether the comments are line comments or a block comments.</p>
<p>Example:</p>
<p><code class="language-javascript"><![CDATA[if (b[a] === "\n") {
    /* parse-ignore-start */
    if (options.lang === "apacheVelocity" && lex[0] === "#") {
        a = a - 1;
        break;
    }
    /* parse-ignore-end */
    parse.lineNumber = parse.lineNumber + 1;
}]]></code></p>
<p>Code from the opening comment to the closing comment is parsed as a single token of types value <em>ignore</em>.</p>
Everything below this line is dynamically generated!</div><div class="section"><h2 id="supported-languages">supported languages</h2>
<ul><li><a href="https://flow.org/">Flow</a>
</li><li><a href="https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">JavaScript / ECMAScript</a>
</li><li><a href="https://json.org/">JSON</a>
</li><li><a href="https://doc.qt.io/qt-5/qmlfirststeps.html">QML</a>
</li><li><a href="https://reactjs.org/docs/introducing-jsx.html">React JSX</a>
</li><li><a href="https://www.styled-components.com/">styled-components</a>
</li><li><a href="https://github.com/zeit/styled-jsx#readme">styled-jsx</a>
</li><li><a href="https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.TextField">TSS (Titanium Style Sheets)</a>
</li><li><a href="https://www.typescriptlang.org/docs/handbook/jsx.html">TSX</a>
</li><li><a href="https://www.typescriptlang.org/">TypeScript</a>
</li></ul></div><div class="section"><h2 id="script-options">script options</h2>
<ul><li><strong>end_comma</strong>: Whether terminal commas in objects and arrays should be added or eliminated. <ul><li>type: string</li><li>default: none</li><li>values: <ul><li><em>always</em>: Adds terminal commas if they are missing.</li><li><em>never</em>: Removes terminal commas if they are present.</li><li><em>none</em>: Ignores this option.</li></ul></li></ul></li><li><strong>object_sort</strong>: Where style properties should be sorted by type and then alphabetically and whether script object properties should be sorted alphabetically. <ul><li>type: boolean</li><li>default: false</li></ul></li><li><strong>quote_convert</strong>: If quote characters should be converted from single quotes to double quotes or the opposite. This option does take into account escaped quote characters. <ul><li>type: string</li><li>default: none</li><li>values: <ul><li><em>double</em>: Converts single quote characters to double quote characters.</li><li><em>none</em>: Ignores this option.</li><li><em>single</em>: Converts double quote characters to single quote characters.</li></ul></li></ul></li><li><strong>variable_list</strong>: Whether consecutive variable declarations should be separate statements or a comma separated list. Use of this option respects the different types of declarations: var, const, let. <ul><li>type: string</li><li>default: none</li><li>values: <ul><li><em>each</em>: Separates variable declarations into separate statements.</li><li><em>list</em>: Combines consecutive variable declaration statements into a single comma separated list.</li><li><em>none</em>: Ignores this option.</li></ul></li></ul></li></ul></div></div><div id="blobs"><span id="svg_left"></span><span id="svg_right"></span><div></div></div><script src="/js/website.js" type="application/javascript"></script></body></html>