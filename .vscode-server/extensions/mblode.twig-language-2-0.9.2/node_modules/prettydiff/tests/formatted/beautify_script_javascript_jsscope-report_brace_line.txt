<p>Scope analysis does not provide support for undeclared variables.</p><p><em>0</em> instances of <strong>missing semicolons</strong> counted.</p><p><em>0</em> unnecessary instances of the keyword <strong>new</strong> counted.</p><div class="beautify" data-prettydiff-ignore="true"><ol class="count"><li>1</li><li>2</li><li class="fold" title="folds from line 3 to line 40">-3</li><li>4</li><li class="fold" title="folds from line 5 to line 35">-5</li><li class="fold" title="folds from line 6 to line 14">-6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li class="fold" title="folds from line 15 to line 24">-15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li class="fold" title="folds from line 25 to line 34">-25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li></ol>
<ol class="data"><li class="c0">    /*prettydiff.com wrap:80 object_sort:true vertical:true brace_line:true*/<em class="line">&#xA;</em></li><li class="c0">    /*global global*/<em class="line">&#xA;</em></li><li class="l0">(function <em class="s0">options_init</em>(): void <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>"use strict";<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>const <em class="s1">optionDef</em> = {<em class="line">&#xA;</em></li><li class="c0">        // accessibility : {<em class="line">&#xA;</em></li><li class="c0">        //    api       : "any",<em class="line">&#xA;</em></li><li class="c0">        //    mode      : "analysis",<em class="line">&#xA;</em></li><li class="c0">        //    lexer     : "markup",<em class="line">&#xA;</em></li><li class="c0">        //    label     : "Accessibility Analysis",<em class="line">&#xA;</em></li><li class="c0">        //    type      : "boolean",<em class="line">&#xA;</em></li><li class="c0">        //    definition: "Whether analysis of HTML should include an accessibility report.",<em class="line">&#xA;</em></li><li class="c0">        //    default   : false<em class="line">&#xA;</em></li><li class="c0">        // },<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>brace_line: {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>api       : "any",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>default   : false,<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>definition: "If true a new line character will be inserted after opening curly braces and bef" +<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span><span class="l1">    </span><span class="l1">    </span>"ore closing curly braces.",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>label     : "Brace Lines",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>lexer     : "script",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>mode      : "beautify",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>type      : "boolean"<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>},<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>wrap      : {<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>api       : "any",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>default   : 0,<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>definition: "Character width limit before applying word wrap. A 0 value disables this option." +<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span><span class="l1">    </span><span class="l1">    </span>" A negative value concatenates script strings.",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>label     : "Wrap",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>lexer     : "any",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>mode      : "any",<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span><span class="l1">    </span>type      : "number"<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>}<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>};<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><em class="s0">global</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.prettydiff<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.api<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.optionDef  = <em class="s1">optionDef</em>;<em class="line">&#xA;</em></li><li class="l0"><em class="s1">}</em>());<em class="line">&#xA;</em></li></ol></div>
